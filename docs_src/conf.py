import git

# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    "sphinx.ext.napoleon",
    "sphinx.ext.autodoc",
    # "sphinx_autodoc_typehints",
    "sphinx.ext.autosummary",
    "sphinx.ext.doctest",
    "sphinx.ext.intersphinx",
    "sphinx.ext.todo",
    "sphinx.ext.coverage",
    "sphinx.ext.graphviz",
    "sphinx_copybutton",
    "nbsphinx",
    "sphinx.ext.mathjax",
    "sphinxcontrib.bibtex",
    "sphinxcontrib.video",
]

# Add any paths that contain templates here, relative to this directory.
# templates_path = ["_templates"]

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = ".rst"

# The master toctree document.
master_doc = "index"

# General information about the project.
project = "pyLeTalker"
copyright = "2025, Takeshi Ikuma, Louisiana State University Health Sciences Center"
author = "Takeshi (Kesh) Ikuma"

import letalker

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = ".".join(letalker.__version__.split(".")[:2])
# The full version, including alpha/beta/rc tags.
release = letalker.__version__
fs = letalker.fs

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = "en"

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This patterns also effect to html_static_path and html_extra_path
exclude_patterns = [
    "_build",
    "Thumbs.db",
    ".DS_Store",
    "**.ipynb_checkpoints",
    "drafts",
    "_templates",
]

suppress_warnings = ["bibtex.duplicate_citation"]

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = "sphinx"

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = True


# Napoleon configuration
napoleon_numpy_docstring = False
napoleon_google_docstring = False
napoleon_use_param = False
# napoleon_include_init_with_doc = False

# Autodoc configuration
autodoc_member_order = "groupwise"
autodoc_type_aliases = {
    "ArrayLike": "~numpy.typing.ArrayLike",
    "NDArray": "~numpy.typing.NDArray",
    "lt": "letalker"
}
autodoc_mock_imports = ["builtins"]
autodoc_typehints_format = "short"
# autodoc_class_signature = "separated"
autodoc_default_options = {"exclude-members": "__new__", "class-doc-from": "init"}
autodoc_typehints = "description"

overloads_location = 'signature'


# Intersphinx configuration
intersphinx_mapping = {
    "python": ("https://docs.python.org/3", None),
    "numpy": ("https://numpy.org/doc/stable/", None),
    "scipy": ("https://docs.scipy.org/doc/scipy/", None),
    "matplotlib": ("https://matplotlib.org/stable/", None),
    "python": ("https://docs.python.org/3/", None),
}

default_role = "py:obj"
nitpicky = False
nitpick_ignore = [
    ("py:class", "List"),
    ("py:class", "Positive"),
    ("py:class", "NonNegative"),
    ("py:class", "numpy.float64"),
    ("py:class", "numpy.complex128"),
    ("py:class", "numpy.typing.ArrayLike"),
    ("py:obj", "List"),
    ("Lungs.LungsBase.Results",None),
]


git_head = git.Repo(search_parent_directories=True).head
try:
    branch_or_commit = str(git_head.ref)
except TypeError:
    branch_or_commit = str(git_head.commit)

linkcheck_ignore = []

rst_epilog = """
.. |binder_badge_examples| image:: https://mybinder.org/badge_logo.svg
    :target: https://mybinder.org/v2/gh/tikuma-lsuhsc/pyLeTalker/{binder_ref}?urlpath=lab/tree/docs/examples
""".format(
    binder_ref=branch_or_commit
)

# nbsphinx_prolog = f"""
# {{% set docname = 'docs_src/' + env.doc2path(env.docname, base=False) %}}

# .. only:: html

#     .. note::

#         An online, interactive version of this example is available at Binder: |binder|

# .. |binder| image:: https://mybinder.org/badge_logo.svg
#     :target: https://mybinder.org/v2/gh/tikuma-lsuhsc/pyLeTalker/{branch_or_commit}?urlpath=lab/tree/{{{{ docname }}}}
# """

copybutton_selector = "div:not(.output_area) > div.highlight > pre"


bibtex_bibfiles = ["refs.bib"]


def setup(app):
    app.add_css_file("css/custom.css")


# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = "sphinx_book_theme"

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

# html_logo = "images/logo.png"
html_theme_options = {
    "logo": {
        "image_light": "images/wave-reflection-model-light.png",
        "image_dark": "images/wave-reflection-model-dark.png",
    },
    "path_to_docs": "docs/",
    "repository_url": "https://github.com/tikuma-lsuhsc/pyLeTalker",
    "repository_branch": branch_or_commit,
    "use_repository_button": True,
    "use_source_button": True,
    "show_toc_level": 2,
}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ["_static"]

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# This is required for the alabaster theme
# refs: http://alabaster.readthedocs.io/en/latest/installation.html#sidebars
# html_sidebars = {
#     '**': [
#         'about.html',
#         'navigation.html',
#         'relations.html',  # needs 'show_related': True theme option to display
#         'searchbox.html',
#         'donate.html',
#     ]
# }


# -- Options for HTMLHelp output ------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = "pyLeTalkerHelp"


# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',
    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',
    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',
    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (
        master_doc,
        "pyLeTalker.tex",
        "pyLeTalker Documentation",
        "Takeshi Ikuma",
        "manual",
    ),
]


# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [(master_doc, "pyLeTalker", "pyLeTalker Documentation", [author], 1)]


# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (
        master_doc,
        "pyLeTalker",
        "pyLeTalker Documentation",
        author,
        "pyLeTalker",
        "One line description of project.",
        "Miscellaneous",
    ),
]


latex_logo = "images/logo-full.pdf"


# -- Options for Epub output ----------------------------------------------

# Bibliographic Dublin Core info.
epub_title = project
epub_author = author
epub_publisher = author
epub_copyright = copyright

# The unique identifier of the text. This can be a ISBN number
# or the project homepage.
#
# epub_identifier = ''

# A unique identification for the text.
#
# epub_uid = ''

# A list of files that should not be packed into the epub file.
epub_exclude_files = ["search.html"]
